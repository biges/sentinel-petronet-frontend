{"remainingRequest":"/Users/halilibrahimguneri/Biges/sentinel-frontend/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/halilibrahimguneri/Biges/sentinel-frontend/src/components/device-details/hap/device-last-signals.vue?vue&type=style&index=0&id=2e4c877f&lang=scss&scoped=true&","dependencies":[{"path":"/Users/halilibrahimguneri/Biges/sentinel-frontend/src/components/device-details/hap/device-last-signals.vue","mtime":1637740674009},{"path":"/Users/halilibrahimguneri/Biges/sentinel-frontend/node_modules/css-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/halilibrahimguneri/Biges/sentinel-frontend/node_modules/vue-loader/lib/loaders/stylePostLoader.js","mtime":499162500000},{"path":"/Users/halilibrahimguneri/Biges/sentinel-frontend/node_modules/postcss-loader/src/index.js","mtime":499162500000},{"path":"/Users/halilibrahimguneri/Biges/sentinel-frontend/node_modules/sass-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/halilibrahimguneri/Biges/sentinel-frontend/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/halilibrahimguneri/Biges/sentinel-frontend/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKLmNvbnRhaW5lciB7CiAganVzdGlmeS1jb250ZW50OiBzcGFjZS1iZXR3ZWVuICFpbXBvcnRhbnQ7CiAgaGVpZ2h0OiA3NXZoOwogIGJveC1zaXppbmc6IGJvcmRlci1ib3g7CiAgZGlzcGxheTogZmxleDsKICBmbGV4LWRpcmVjdGlvbjogY29sdW1uOwoKICAvLyBwYWRkaW5nOiAwcHggMHB4IDBweCAxM3B4OwogIC5ib3R0b20gewogICAgcG9zaXRpb246IHJlbGF0aXZlOwogICAgcGFkZGluZzogMzRweDsKICAgIG1pbi1oZWlnaHQ6IDI1cHg7CiAgICBiYWNrZ3JvdW5kOiByZ2JhKDE2MCwgMTYwLCAxNjAsIDAuMSk7CiAgfQp9Cg=="},{"version":3,"sources":["device-last-signals.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAoFA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"device-last-signals.vue","sourceRoot":"src/components/device-details/hap","sourcesContent":["<template>\n  <div class=\"container\">\n    <DeviceDetailsLastSignalsFilter\n      @onFilteredData=\"handleFilteredData\"\n    ></DeviceDetailsLastSignalsFilter>\n    <DataTable :data=\"data\"></DataTable>\n    <DataTablePagination\n      @onChangeCurrentPage=\"handleChangePagination\"\n      @onChangeSize=\"handleChangePagination\"\n      class=\"bottom\"\n    ></DataTablePagination>\n  </div>\n</template>\n\n<script>\nimport { mapActions, mapGetters } from \"vuex\";\nimport DataTable from \"@/components/atomic/data-table.vue\";\nimport DataTablePagination from \"@/components/atomic/data-table-pagination.vue\";\nimport DeviceDetailsLastSignalsFilter from \"@/components/device-details/hap/details-last-signals-filter.vue\";\n\nexport default {\n  name: \"DeviceLastSignals\",\n  components: {\n    DataTable,\n    DataTablePagination,\n    DeviceDetailsLastSignalsFilter,\n  },\n  data() {\n    return {\n      data: [],\n\t\tdevice_id:this.$route.params.device_id,\n      filtered_data: {},\n    };\n  },\n  computed: {\n    ...mapGetters({\n      getCurrentPage: \"pagination/getCurrentPage\",\n      getCurrentLimit: \"pagination/getCurrentLimit\",\n    }),\n  },\n  methods: {\n    ...mapActions({\n      getProsecDeviceLastSignals: \"device/getProsecDeviceLastSignals\",\n    }),\n    handleChangePagination() {\n      this.data = [];\n\t// \tObject.keys(this.filterData).forEach((item) => {\n    //     if (this.filterData[item] == \"\") delete this.filterData[item];\n    // });\n      this.getProsecDeviceSignalsHistory({\n        page: this.getCurrentPage,\n        limit: this.getCurrentLimit,\n        ...this.filterData,\n      });\n    },\n    handleFilteredData(payload) {\n      this.data = [];\n      this.filtered_data = {page:1, limit: 20 ,...payload};\n      this.$emit(\"filterData\", this.filtered_data);\n    //   console.log(\"filterData\", this.filtered_data);\n      this.getProsecDeviceSignalsHistory(payload);\n    },\n    getProsecDeviceSignalsHistory(payload) {\n      let device_signals = this.getProsecDeviceLastSignals({\n        device_id: this.device_id,\n        ...payload,\n      });\n      device_signals.then((r) => {\n        console.log(\"Last Signals\", r);\n        this.data = r;\n      });\n    },\n  },\n  created() {\n\t//   this.device_id = this.$route.params.device_id;\n  },\n  mounted() {\n    // console.log(\"mounted last signals\");\n    this.getProsecDeviceSignalsHistory();\n  },\n};\n</script>\n\n<style lang=\"scss\" scoped>\n.container {\n  justify-content: space-between !important;\n  height: 75vh;\n  box-sizing: border-box;\n  display: flex;\n  flex-direction: column;\n\n  // padding: 0px 0px 0px 13px;\n  .bottom {\n    position: relative;\n    padding: 34px;\n    min-height: 25px;\n    background: rgba(160, 160, 160, 0.1);\n  }\n}\n</style>\n"]}]}