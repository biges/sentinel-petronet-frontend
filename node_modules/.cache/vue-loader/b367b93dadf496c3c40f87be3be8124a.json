{"remainingRequest":"/Users/halilibrahimguneri/Biges/sentinel-frontend/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/halilibrahimguneri/Biges/sentinel-frontend/src/views/Services/services.vue?vue&type=style&index=0&id=f057b6b6&scoped=true&lang=scss&","dependencies":[{"path":"/Users/halilibrahimguneri/Biges/sentinel-frontend/src/views/Services/services.vue","mtime":1639036167640},{"path":"/Users/halilibrahimguneri/Biges/sentinel-frontend/node_modules/css-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/halilibrahimguneri/Biges/sentinel-frontend/node_modules/vue-loader/lib/loaders/stylePostLoader.js","mtime":499162500000},{"path":"/Users/halilibrahimguneri/Biges/sentinel-frontend/node_modules/postcss-loader/src/index.js","mtime":499162500000},{"path":"/Users/halilibrahimguneri/Biges/sentinel-frontend/node_modules/sass-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/halilibrahimguneri/Biges/sentinel-frontend/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/halilibrahimguneri/Biges/sentinel-frontend/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgouc2VydmljZS1jb250YWluZXIgewogIGJveC1zaXppbmc6IGJvcmRlci1ib3g7CiAgbWluLWhlaWdodDogMTAwdmg7CiAgZGlzcGxheTogZmxleDsKICBmbGV4LWRpcmVjdGlvbjogY29sdW1uOwp9Ci5ib3R0b20gewogIHBhZGRpbmc6IDM0cHggMzRweCAxNnB4IDM0cHg7CiAgbWluLWhlaWdodDogNTBweDsKICBiYWNrZ3JvdW5kOiByZ2JhKDE2MCwgMTYwLCAxNjAsIDAuMSk7Cn0K"},{"version":3,"sources":["services.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA4IA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"services.vue","sourceRoot":"src/views/Services","sourcesContent":["<template>\n  <div class=\"page-inner service-container\">\n    <ServiceHeader\n      @onUpdateTable=\"handleUpdate\"\n      @onFiltred=\"handleFiltred\"\n      @onhandleFiltredParam=\"handleFilterParam\"\n    ></ServiceHeader>\n    <DataTable :data=\"data\"></DataTable>\n    <DataTablePagination\n      class=\"bottom\"\n      @onChangeSize=\"handlePaginateCurrentPage\"\n      @onChangeCurrentPage=\"handlePaginateCurrentPage\"\n    ></DataTablePagination>\n  </div>\n</template>\n\n<script>\nimport endpoints from \"@/endpoints\";\nimport moment from \"moment\";\nimport ServiceHeader from \"@/components/service/service-header.vue\";\nimport DataTable from \"@/components/atomic/data-table.vue\";\nimport DataTablePagination from \"@/components/atomic/data-table-pagination.vue\";\nimport { mapActions, mapGetters } from \"vuex\";\nexport default {\n  name: \"Service\",\n  components: {\n    ServiceHeader,\n    DataTable,\n    DataTablePagination,\n  },\n  data() {\n    return {\n      is_filtered: false,\n      filter_param: {},\n      paginate: {\n        limit: 10,\n        page: 1,\n      },\n      data: [],\n    };\n  },\n  computed: {\n    ...mapGetters({\n      getCurrentPage: \"pagination/getCurrentPage\",\n      getCurrentLimit: \"pagination/getCurrentLimit\",\n    }),\n  },\n  methods: {\n    ...mapActions({\n      getServices: \"service/getServices\",\n    }),\n    handleFilterParam(val) {\n      this.is_filtered = Object.keys(val).length > 0;\n      this.filter_param = val;\n      this.getTicketsPagination({\n        ...this.filter_param,\n        page: this.getCurrentPage,\n        limit: this.getCurrentLimit,\n      });\n    },\n\n    handlePaginateCurrentPage() {\n      this.data = [];\n      this.getTicketsPagination({\n        ...this.filter_param,\n        page: this.getCurrentPage,\n        limit: this.getCurrentLimit,\n      });\n    },\n    mapingTableData(records) {\n      this.data = [];\n      records.forEach((el) => {\n        let ticket = {\n          premise_id: el.premise.custom_premise_id,\n          location: el.premise.location\n            ? el.premise.location.city.name +\n              \"/\" +\n              el.premise.location.province.name\n            : \"\",\n          premise_name: el.premise.custom_premise_name,\n          // device: el.premise.devices[0]\n          //   ? el.premise.devices[0].device_model.name +\n          //     \"/\" +\n          //     el.premise.devices[0].device_brand.name\n          //   : \"\",\n          fault_type: el.ticket_type,\n          service_state: el.status,\n          started_at: moment(el.start_time).format(\"DD.MM.YYYY HH:mm\"),\n          created_at: moment(el.created_at).format(\"DD.MM.YYYY HH:mm\"),\n          ended_at: moment(el.finish_time).format(\"DD.MM.YYYY HH:mm\"),\n        };\n        this.data.push(ticket);\n      });\n    },\n    getTicketsPaginationFilter(limit, page, premise_id) {\n      this.data = [];\n      this.$api({\n        ...endpoints.getTicketsPagination,\n        params: {\n          limit: limit,\n          page: page,\n          search: premise_id,\n        },\n      }).then((r) => {\n        if (r.data.data.pagination.records)\n          this.mapingTableData(r.data.data.pagination.records);\n        this.paginate = r.data.data.pagination;\n        delete this.paginate.records;\n      });\n    },\n\n    getTicketsPagination(payload) {\n      let services = this.getServices(payload);\n      services.then((r) => {\n        this.mapingTableData(r);\n      });\n    },\n  },\n  created() {\n    if (this.$route.params.premise_id) {\n      // this.getTicketsPaginationFilter(\n      //   this.paginate.limit,\n      //   this.paginate.page,\n      //   this.$route.params.premise_id\n      // )\n    } else {\n      //   let services = this.getServices({ page: 1, limit: 20 });\n      //   services.then((r) => {\n      //     this.mapingTableData(r);\n      //   });\n      this.getTicketsPagination({\n        limit: this.getCurrentLimit,\n        page: this.getCurrentPage,\n      });\n    }\n  },\n};\n</script>\n\n<style scoped lang=\"scss\">\n.service-container {\n  box-sizing: border-box;\n  min-height: 100vh;\n  display: flex;\n  flex-direction: column;\n}\n.bottom {\n  padding: 34px 34px 16px 34px;\n  min-height: 50px;\n  background: rgba(160, 160, 160, 0.1);\n}\n</style>\n"]}]}