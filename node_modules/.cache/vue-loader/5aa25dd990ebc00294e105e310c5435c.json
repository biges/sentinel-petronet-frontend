{"remainingRequest":"/Users/halilibrahimguneri/Biges/sentinel-frontend/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/halilibrahimguneri/Biges/sentinel-frontend/src/views/List/list.vue?vue&type=style&index=0&id=30537b25&lang=scss&scoped=true&","dependencies":[{"path":"/Users/halilibrahimguneri/Biges/sentinel-frontend/src/views/List/list.vue","mtime":1639418467752},{"path":"/Users/halilibrahimguneri/Biges/sentinel-frontend/node_modules/css-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/halilibrahimguneri/Biges/sentinel-frontend/node_modules/vue-loader/lib/loaders/stylePostLoader.js","mtime":499162500000},{"path":"/Users/halilibrahimguneri/Biges/sentinel-frontend/node_modules/postcss-loader/src/index.js","mtime":499162500000},{"path":"/Users/halilibrahimguneri/Biges/sentinel-frontend/node_modules/sass-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/halilibrahimguneri/Biges/sentinel-frontend/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/halilibrahimguneri/Biges/sentinel-frontend/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCi5jb250YWluZXIgewogIGRpc3BsYXk6IGZsZXggIWltcG9ydGFudDsKICBmbGV4LWRpcmVjdGlvbjogY29sdW1uOwogIG1pbi1oZWlnaHQ6IDEwMHZoOwp9Ci5kYXRhLWxheWVyIHsKICBkaXNwbGF5OiBmbGV4OwogIGZsZXgtZGlyZWN0aW9uOiBjb2x1bW47CiAgZmxleC13cmFwOiB3cmFwOwogIC8vIG1pbi13aWR0aDogMTAwJSAhaW1wb3J0YW50OwogIG1hcmdpbi1sZWZ0OiAxMnB4Owp9Ci5ib3R0b20gewogIHBhZGRpbmc6IDM0cHg7CiAgbWluLWhlaWdodDogMjVweDsKICBiYWNrZ3JvdW5kOiByZ2JhKDE2MCwgMTYwLCAxNjAsIDAuMSk7Cn0K"},{"version":3,"sources":["list.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA8FA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"list.vue","sourceRoot":"src/views/List","sourcesContent":["<template>\n  <div class=\"container\">\n    <ListFilter\n      class=\"top\"\n      @onActionClick=\"handleActionClick\"\n      @onFilteredData=\"handleFilteredData\"\n    ></ListFilter>\n    <DataTable class=\"data-layer\" :data=\"table_data\"></DataTable>\n    <DataTablePagination\n      class=\"bottom\"\n      @onChangeCurrentPage=\"handleChangePagination\"\n      @onChangeSize=\"handleChangePagination\"\n    ></DataTablePagination>\n    <SentinelModal\n      @onClose=\"handleModalClose\"\n      :drawer=\"modal_visible\"\n      :type=\"modal_type\"\n    ></SentinelModal>\n  </div>\n</template>\n\n<script>\nimport DataTable from '@/components/atomic/data-table.vue'\nimport DataTablePagination from '@/components/atomic/data-table-pagination.vue'\nimport ListFilter from '@/components/list/list-filter'\nimport SentinelModal from '@/components/modal/sentinel-modal.vue'\n\nimport { mapActions, mapGetters } from 'vuex'\nexport default {\n  name: 'List',\n  components: {\n    ListFilter,\n    DataTable,\n    DataTablePagination,\n    SentinelModal\n  },\n  data() {\n    return {\n      modal_type: null,\n      selectedAction: '',\n      modal_visible: false,\n      table_data: []\n    }\n  },\n  computed: {\n    ...mapGetters({\n      getCurrentPage: 'pagination/getCurrentPage',\n      getCurrentLimit: 'pagination/getCurrentLimit'\n    })\n  },\n  methods: {\n    ...mapActions({\n      getDevices: 'device/getDevices'\n    }),\n    handleChangePagination() {\n      this.fillDataTable({\n        page: this.getCurrentPage,\n        limit: this.getCurrentLimit\n      })\n    },\n    handleActionClick(val) {\n      this.modal_visible = true\n      switch (val) {\n        case 'action':\n          this.modal_type = 'action'\n          break\n        case 'report':\n          this.modal_type = 'report'\n          break\n        case 'service':\n          this.modal_type = 'service'\n          break\n      }\n    },\n    async handleFilteredData(val) {\n      await this.fillDataTable(val)\n    },\n    handleModalClose(val) {\n      this.modal_visible = val\n    },\n    async fillDataTable(params) {\n      let devices = this.getDevices({ page: 1, limit: 20, ...params })\n      devices.then((r) => {\n        this.table_data = r\n      })\n    }\n  },\n  created() {\n    this.fillDataTable()\n  }\n}\n</script>\n\n<style lang=\"scss\" scoped>\n.container {\n  display: flex !important;\n  flex-direction: column;\n  min-height: 100vh;\n}\n.data-layer {\n  display: flex;\n  flex-direction: column;\n  flex-wrap: wrap;\n  // min-width: 100% !important;\n  margin-left: 12px;\n}\n.bottom {\n  padding: 34px;\n  min-height: 25px;\n  background: rgba(160, 160, 160, 0.1);\n}\n</style>\n"]}]}